CREATE DATABASE cybercom_sql3_5;

USE cybercom_sql3_5;

-- Table for customers
CREATE TABLE IF NOT EXISTS customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone VARCHAR(20)
);

-- Table for products
CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(100),
    unit_price DECIMAL(10, 2),
    description TEXT
);

-- Table for orders
CREATE TABLE IF NOT EXISTS orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    order_date DATE,
    customer_id INT,
    product_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- 1.	Insert at least five customers, five products, and ten orders into the respective tables. Make sure that at least two customers have multiple orders, and at least two products are included in multiple orders.

-- Insert data into customers table
INSERT INTO customers (first_name, last_name, email, phone)
VALUES
('John', 'Doe', 'john.doe@example.com', '1234567890'),
('Jane', 'Smith', 'jane.smith@example.com', '9876543210'),
('Michael', 'Johnson', 'michael.johnson@example.com', '4567890123'),
('Emily', 'Davis', 'emily.davis@example.com', '7890123456'),
('David', 'Clark', 'david.clark@example.com', '3210987654');

-- Insert data into products table
INSERT INTO products (product_name, unit_price, description)
VALUES
('Product A', 25.00, 'Description for Product A'),
('Product B', 50.00, 'Description for Product B'),
('Product C', 75.00, 'Description for Product C'),
('Product D', 100.00, 'Description for Product D'),
('Product E', 150.00, 'Description for Product E');

-- Insert data into orders table
INSERT INTO orders (order_date, customer_id, product_id)
VALUES
('2023-01-15', 1, 1),
('2023-01-20', 2, 2),
('2023-02-05', 3, 3),
('2023-02-10', 4, 4),
('2023-02-20', 5, 5),
('2023-03-05', 1, 2),
('2023-03-10', 2, 3),
('2023-03-20', 3, 4),
('2023-03-25', 4, 5),
('2023-04-05', 5, 1);

-- 2.	Write a query that retrieves the customer's first name, last name, email, and the number of orders they have placed. The results should be ordered by the number of orders in descending order.
SELECT c.first_name, c.last_name, c.email, COUNT(o.order_id) AS num_orders
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
ORDER BY num_orders DESC;

-- 3.	Write a query that retrieves the product name, the total number of orders for each product, and the total revenue generated by each product. The results should be ordered by the total revenue in descending order.
SELECT p.product_name, COUNT(o.order_id) AS total_orders, SUM(p.unit_price) AS total_revenue
FROM products p
LEFT JOIN orders o ON p.product_id = o.product_id
GROUP BY p.product_id
ORDER BY total_revenue DESC;


-- 4.	Write a query that retrieves the first name, last name, email, and product name for each order. The results should only include orders where the customer has placed multiple orders.
SELECT c.first_name, c.last_name, c.email, p.product_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN products p ON o.product_id = p.product_id
WHERE c.customer_id IN (
    SELECT customer_id
    FROM orders
    GROUP BY customer_id
    HAVING COUNT(*) > 1
);

-- 5.	Write a query that retrieves the first name, last name, and email for each customer who has placed at least one order for a product with a unit price greater than $50.
SELECT c.first_name, c.last_name, c.email
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN products p ON o.product_id = p.product_id
WHERE p.unit_price > 50
GROUP BY c.customer_id;

-- 6.	Write a query that retrieves the product name and the number of times it has been ordered, but only includes products that have been ordered more than once.
SELECT p.product_name, COUNT(o.order_id) AS times_ordered
FROM products p
JOIN orders o ON p.product_id = o.product_id
GROUP BY p.product_id
HAVING COUNT(o.order_id) > 1;
